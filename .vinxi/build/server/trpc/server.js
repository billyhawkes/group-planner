import{resolveResponse as L}from"@trpc/server/http";import{relations as w,eq as a,and as C}from"drizzle-orm";import{sqliteTable as y,text as o,integer as h,primaryKey as D}from"drizzle-orm/sqlite-core";import{createSelectSchema as q}from"drizzle-zod";import{z as s}from"zod";import{initTRPC as $,TRPCError as b}from"@trpc/server";import{Lucia as K,generateId as x}from"lucia";import{createClient as O}from"@libsql/client";import{drizzle as j}from"drizzle-orm/libsql";import{DrizzleSQLiteAdapter as M}from"@lucia-auth/adapter-drizzle";import{AwsClient as k}from"aws4fetch";import F from"pusher";import G from"superjson";import{H3Event as E,getRequestURL as z,setResponseStatus as W,getCookie as B,setHeader as Y,getRequestWebStream as Q,eventHandler as J}from"h3";import{getContext as V}from"unctx";import{AsyncLocalStorage as Z}from"node:async_hooks";const u=y("users",{id:o("id").notNull().primaryKey(),email:o("email",{length:254}).unique().notNull(),googleId:o("google_id").unique().notNull(),name:o("name")}),X=w(u,({one:e,many:t})=>({usersToGroups:t(c),messages:t(I),media:t(l),events:t(m),userToEvents:t(g)})),P=y("sessions",{id:o("id").notNull().primaryKey(),userId:o("user_id").notNull(),expiresAt:h("expires_at").notNull()}),c=y("users_to_groups",{userId:o("user_id").notNull(),groupId:o("group_id").notNull()},e=>({pk:D({columns:[e.userId,e.groupId]})})),ee=w(c,({one:e,many:t})=>({user:e(u,{fields:[c.userId],references:[u.id]}),group:e(f,{fields:[c.groupId],references:[f.id]})})),f=y("groups",{id:o("id").notNull().primaryKey(),name:o("name").notNull()}),te=w(f,({one:e,many:t})=>({usersToGroups:t(c)})),I=y("messages",{id:o("id").notNull().primaryKey(),userId:o("user_id").notNull(),groupId:o("group_id").notNull(),content:o("content").notNull(),createdAt:h("created_at",{mode:"timestamp"}).notNull(),updatedAt:h("updated_at",{mode:"timestamp"}).notNull()}),re=w(I,({one:e,many:t})=>({user:e(u,{fields:[I.userId],references:[u.id]})})),l=y("media",{id:o("id").notNull().primaryKey(),userId:o("user_id").notNull(),groupId:o("group_id").notNull(),type:o("type").notNull(),createdAt:h("created_at",{mode:"timestamp"}).notNull()}),se=w(l,({one:e,many:t})=>({user:e(u,{fields:[l.userId],references:[u.id]}),group:e(f,{fields:[l.groupId],references:[f.id]})})),g=y("user_to_events",{userId:o("user_id").notNull(),eventId:o("event_id").notNull(),accepted:h("id",{mode:"boolean"})},e=>({pk:D({columns:[e.userId,e.eventId]})})),ne=w(g,({one:e,many:t})=>({user:e(u,{fields:[g.userId],references:[u.id]}),event:e(m,{fields:[g.eventId],references:[m.id]})})),m=y("events",{id:o("id").notNull().primaryKey(),groupId:o("group_id").notNull(),userId:o("user_id").notNull(),name:o("name").notNull(),description:o("description"),startsAt:h("starts_at",{mode:"timestamp"}).notNull(),endsAt:h("ends_at",{mode:"timestamp"}).notNull()}),oe=w(m,({one:e,many:t})=>({userToEvents:t(g),group:e(f,{fields:[m.groupId],references:[f.id]}),user:e(u,{fields:[m.userId],references:[u.id]})})),ue=Object.freeze(Object.defineProperty({__proto__:null,events:m,eventsRelations:oe,groups:f,groupsRelations:te,media:l,mediaRelations:se,messages:I,messagesRelations:re,sessions:P,userToEvents:g,userToEventsRelations:ne,users:u,usersRelations:X,usersToGroups:c,usersToGroupsRelations:ee},Symbol.toStringTag,{value:"Module"})),ie=q(u),ae=ie.pick({name:!0,email:!0}).extend({name:s.string().min(1).max(255).optional(),email:s.string().email().min(1).max(254)});q(I);const ce=q(m),de=ce.omit({id:!0,userId:!0}).extend({name:s.string().min(1).max(255),description:s.string().min(1).max(1024).optional()}),U=()=>{const e=O({url:process.env.DATABASE_URL,authToken:process.env.DATABASE_TOKEN});return j(e,{schema:ue})},pe=()=>{const e=U(),t=new M(e,P,u);return new K(t,{sessionCookie:{attributes:{secure:!0}}})};function le(e){let t;const r=S(e),n={duplex:"half",method:e.method,headers:e.headers};return e.node.req.body instanceof ArrayBuffer?new Request(r,{...n,body:e.node.req.body}):new Request(r,{...n,get body(){return t||(t=we(e),t)}})}function me(e){return e.web??={request:le(e),url:S(e)},e.web.request}function ge(){return Te()}const H=Symbol("$HTTPEvent");function fe(e){return typeof e=="object"&&(e instanceof E||e?.[H]instanceof E||e?.__is_event__===!0)}function _(e){return function(...t){let r=t[0];if(fe(r))t[0]=r instanceof E||r.__is_event__?r:r[H];else{if(!globalThis.app.config.server.experimental?.asyncContext)throw new Error("AsyncLocalStorage was not enabled. Use the `server.experimental.asyncContext: true` option in your app configuration to enable it. Or, pass the instance of HTTPEvent that you have as the first argument to the function.");if(r=ge(),!r)throw new Error("No HTTPEvent found in AsyncLocalStorage. Make sure you are using the function within the server runtime.");t.unshift(r)}return e(...t)}}const S=_(z),ye=_(W),he=_(B),Ie=_(Y),we=_(Q),_e=_(me);function ve(){return V("nitro-app",{asyncContext:!!globalThis.app.config.server.experimental?.asyncContext,AsyncLocalStorage:Z})}function Te(){return ve().use().event}const be=async({event:e})=>{const t=he(e,"auth_session"),r=pe(),n={db:U(),r2:new k({accessKeyId:process.env.R2_KEY_ID,secretAccessKey:process.env.R2_ACCESS_KEY,region:"auto"}),pusher:new F({appId:"1828662",key:process.env.VITE_PUSHER_KEY,secret:process.env.PUSHER_SECRET,cluster:"us2",useTLS:!0})};if(!t)return{...n,userId:null};const{session:i}=await r.validateSession(t);return i?{...n,userId:i.userId}:{...n,userId:null}},A=$.context().create({transformer:G}),v=A.router,R=A.procedure,d=A.procedure.use(({ctx:e,next:t})=>{if(!e.userId)throw new b({code:"UNAUTHORIZED",message:"You must be logged in to access this resource."});return t({ctx:{...e,userId:e.userId}})}),Re=v({find:d.input(s.object({groupId:s.string()})).query(async({ctx:{db:e},input:{groupId:t}})=>e.query.events.findMany({where:a(c.groupId,t),with:{user:!0,userToEvents:{with:{user:!0}}}})),create:d.input(de).mutation(async({ctx:{db:e,userId:t},input:r})=>e.insert(m).values({id:x(15),...r,userId:t})),status:d.input(s.object({id:s.string(),accepted:s.boolean()})).mutation(async({ctx:{db:e,userId:t},input:{id:r,accepted:n}})=>{const i=await e.query.events.findFirst({where:a(m.id,r)});if(!i)throw new b({code:"NOT_FOUND",message:"Event not found"});if(!await e.query.usersToGroups.findFirst({where:C(a(c.groupId,i.groupId),a(c.userId,t))}))throw new b({code:"FORBIDDEN",message:"Not a member of the group"});return e.insert(g).values({userId:t,eventId:r,accepted:n}).onConflictDoUpdate({set:{accepted:n},target:[g.userId,g.eventId]})}),members:d.input(s.object({groupId:s.string()})).query(async({ctx:{db:e},input:{groupId:t}})=>(await e.query.usersToGroups.findMany({where:a(c.groupId,t),with:{user:!0}})).map(({user:n})=>n))}),Ne=v({find:d.query(async({ctx:{db:e,userId:t}})=>(await e.query.usersToGroups.findMany({where:a(c.userId,t),with:{group:!0}})).map(({group:n})=>n)),members:d.input(s.object({groupId:s.string()})).query(async({ctx:{db:e},input:{groupId:t}})=>(await e.query.usersToGroups.findMany({where:a(c.groupId,t),with:{user:!0}})).map(({user:n})=>n))}),Ee=v({find:R.input(s.object({groupId:s.string()})).query(async({ctx:{db:e},input:{groupId:t}})=>e.query.media.findMany({where:a(l.groupId,t),with:{user:!0}})),getPresignedUrl:R.input(s.object({type:s.string(),size:s.number(),groupId:s.string()})).mutation(async({ctx:{r2:e},input:{type:t,size:r,groupId:n}})=>{const i=x(15);return{url:(await e.sign(`${process.env.R2_ENDPOINT}/${n}/media/${i}`,{method:"PUT",headers:{"Content-Type":t,"Content-Length":`${r}`},aws:{signQuery:!0}})).url,id:i}}),create:d.input(s.object({id:s.string(),groupId:s.string()})).mutation(async({ctx:{db:e,userId:t},input:{id:r,groupId:n}})=>e.insert(l).values({id:r,userId:t,groupId:n,type:"image",createdAt:new Date})),delete:d.input(s.object({id:s.string(),groupId:s.string()})).mutation(async({ctx:{db:e,r2:t,userId:r},input:{groupId:n,id:i}})=>{await e.delete(l).where(C(a(l.id,i),a(l.userId,r))),t.fetch(`${process.env.R2_ENDPOINT}/${n}/media/${i}`,{method:"DELETE"})})}),qe=v({find:R.input(s.object({groupId:s.string()})).query(async({ctx:{db:e},input:{groupId:t}})=>e.query.messages.findMany({where:a(I.groupId,t),with:{user:!0}})),send:d.input(s.object({content:s.string(),groupId:s.string()})).mutation(async({ctx:{db:e,userId:t,pusher:r},input:{content:n,groupId:i}})=>{const p={id:x(15),content:n,groupId:i,userId:t,createdAt:new Date,updatedAt:new Date},T=await e.query.users.findFirst({where:a(u.id,t)});if(!T)throw new b({code:"NOT_FOUND",message:"User not found"});return await e.insert(I).values(p),r.trigger(`group-${i}`,"message",{...p,user:T}),{...p,user:T}})}),xe=v({me:d.query(async({ctx:{db:e,userId:t}})=>(console.log(t),e.query.users.findFirst({where:a(u.id,t)}))),update:d.input(ae).mutation(async({ctx:{db:e,userId:t},input:r})=>e.update(u).set(r).where(a(u.id,t)))}),Se=v({userList:R.query(async()=>[{id:1,name:"John Doe"}]),media:Ee,messages:qe,users:xe,groups:Ne,events:Re}),We=J(async e=>{const r=S(e).pathname.replace(/^\/trpc/,"").slice(1),n=_e(e),{status:i,headers:p,body:T}=await L({router:Se,req:n,path:r,error:null,createContext:()=>be({event:e})});return ye(e,i),p&&Object.keys(p).forEach(N=>{p.get(N)&&Ie(e,N,p.get(N))}),T});export{We as default};
